{"version":3,"sources":["components/Api.js","utils/getMassFromData.js","components/Title.js","components/LoadingScreen.jsx","components/YearInputForm.jsx","components/Table.js","components/MeteorTable.jsx","components/MeteorList.js","App.js","index.js"],"names":["fetchDataFromNasa","startYear","endYear","array","fetch","then","res","push","json","Promise","all","getMassFromData","meteorState","finalArray","i","length","mass","Title","start","finish","LoadingScreen","className","src","alt","YearInputForm","handleSubmit","handleChange","state","onSubmit","type","minLength","maxLength","value","years","name","onChange","Table","props","meteorOne","id","recclass","year","slice","MeteorTable","meteors","map","meteor","MeteorList","isLoading","data","labels","datasets","label","backgroundColor","titleYears","changedYears","event","setState","current","target","preventDefault","currentState","this","width","height","options","maintainAspectRatio","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.affc75df.chunk.js","sourcesContent":["const fetchDataFromNasa = (startYear, endYear) => {\n    const array = []\n        return fetch(`https://data.nasa.gov/resource/gh4g-9sfh.json?$select=name,id,mass,year,recclass%20where%20year%20between%20%27${startYear}-01-01T00:00:00.000%27%20and%20%27${endYear}-01-01T00:00:00.000%27`)\n            .then(res => {\n                array.push(res.json())\n                return array\n            })\n            .then(res => {\n                return Promise.all(res)\n            })\n}\n\nexport default fetchDataFromNasa;","/*\nGroups:\n0-50\n50-100\n100-200\n200-300\n300-400\n400-700\n700-1000\nthen 1000+\nand 10000+\n100000+\n*/\n\nconst getMassFromData = (meteorState) => {\n    const finalArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    for (let i = 0; i < meteorState.length; i++) {\n        if (meteorState[i].mass <= 50) finalArray[0]++\n        else if (meteorState[i].mass <= 100 && meteorState[i].mass > 50) {\n            finalArray[1]++;\n        }\n        else if (meteorState[i].mass <= 200 && meteorState[i].mass > 100) finalArray[2]++\n        else if (meteorState[i].mass <= 300 && meteorState[i].mass > 200) finalArray[3]++\n        else if (meteorState[i].mass <= 400 && meteorState[i].mass > 300) finalArray[4]++\n        else if (meteorState[i].mass <= 700 && meteorState[i].mass > 400) finalArray[5]++\n        else if (meteorState[i].mass <= 1000 && meteorState[i].mass > 700) finalArray[6]++\n        else if (meteorState[i].mass <= 10000 && meteorState[i].mass > 1000) finalArray[7]++\n        else if (meteorState[i].mass < 100000 && meteorState[i].mass > 10000) finalArray[8]++\n        else if (meteorState[i].mass >= 100000) finalArray[9]++\n    }\n    return finalArray;\n}\n\n// module.exports = getMassFromData;\nexport default getMassFromData;\n\n","const Title = ({start, finish}) => {\n    return (\n        <header>\n           <h1>{`Fallen Meteorites Data from ${start} to ${finish}`}</h1>\n        </header>\n    )\n}\n\nexport default Title; ","import React from 'react';\n\nconst LoadingScreen = () => {\n    return (\n        <section>\n            <img className=\"nyan\" src=\"https://newscrewdriver.files.wordpress.com/2018/10/poptartcat320240.gif?w=320&zoom=2\" alt=\"nyan cat\">\n            </img>\n            <p>Loading</p>\n        </section>\n    );\n};\n\nexport default LoadingScreen;","import React from 'react';\n\nconst YearInputForm = ({handleSubmit, handleChange, state}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n                        <label>\n                            From\n                            <input\n                                type=\"number\"\n                                minLength=\"0\"\n                                maxLength=\"2020\"\n                                value={state.years.start}\n                                name=\"start\"\n                                onChange={handleChange}\n                            ></input>\n                        </label>\n                        <label>\n                            Until\n                            <input\n                                type=\"number\"\n                                minLength=\"0\"\n                                maxLength=\"2020\"\n                                value={state.years.finish}\n                                name=\"finish\"\n                                onChange={handleChange}\n                            ></input>\n                        </label>\n                        <button>Submit</button>\n                    </form>\n    );\n};\n\nexport default YearInputForm;","const Table = (props) => {\n    return (\n        <tr>\n            <td>{props.meteorOne.name}</td> \n            <td>{props.meteorOne.id}</td>\n            <td>{props.meteorOne.mass}</td>\n            <td>{props.meteorOne.recclass}</td>\n            <td>{props.meteorOne.year.slice(0,4)}</td>\n        </tr>\n    )\n}\n\nexport default Table;","import React from 'react';\nimport Table from \"./Table\"\n\nconst MeteorTable = ({meteors}) => {\n    return (\n        <table>\n            <thead>\n                <tr className=\"headers\">\n                    <th>name</th>\n                    <th>id</th>\n                    <th>mass</th>\n                    <th>recclass</th>\n                    <th>year</th>\n                </tr>\n            </thead>\n            <tbody>\n                {meteors.map((meteor) => {\n                    return <Table key={meteor.id} meteorOne={meteor} />;\n                })}\n            </tbody>\n        </table>\n    );\n};\n\nexport default MeteorTable;","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\"\nimport '../App.css'\nimport fetchDataFromNasa from \"./Api\"\nimport getMassFromData from \"../utils/getMassFromData\"\nimport Title from \"./Title\";\nimport LoadingScreen from \"./LoadingScreen\";\nimport YearInputForm from \"./YearInputForm\";\nimport MeteorTable from \"./MeteorTable\";\n\nclass MeteorList extends React.Component {\n    state = {\n        meteors: [],\n        isLoading: true,\n        data: {\n            labels: [\"0-50\", \"50-100\", \"100-200\", \"200-300\", \"300-400\", \"400-700\", \"700-1000\", \"1k-10k\", \"10k-100k\", \"100K+\"],\n            datasets: [{\n                label: \"Mass of meteors in grams\",\n                backgroundColor: \"rgba(255,99,132,0.5)\",\n                data: []\n            }]\n        },\n        years: {\n            start: 2012,\n            finish: 2013\n        },\n        titleYears: {\n            start: 2012,\n            finish: 2013\n        },\n        changedYears: false\n    }\n\n    componentDidMount() {\n        fetchDataFromNasa(\"2012\", \"2013\").then(([res]) => {\n            this.setState((currentState) => {\n                return { ...currentState, meteors: res, isLoading: false, data: { ...currentState.data, datasets: [{ ...currentState.data.datasets[0], data: getMassFromData(res) }] } }\n            });\n        })\n    }\n\n    componentDidUpdate () {\n        if (this.state.changedYears) {\n            fetchDataFromNasa(this.state.years.start, this.state.years.finish).then(([res]) => {\n                this.setState((currentState) => {\n                    return { ...currentState, meteors: res, isLoading: false, data: { ...currentState.data, datasets: [{ ...currentState.data.datasets[0], data: getMassFromData(res) }] }, changedYears: false }\n                });\n            })\n        }\n    }\n\n    render () {\n        return (\n            this.state.isLoading ?\n                <LoadingScreen />\n                : \n                <>\n                    <Title start={this.state.titleYears.start} finish={this.state.titleYears.finish} />\n                    <p>Choose years to display</p>\n                    <YearInputForm handleSubmit={this.handleSubmit} handleChange={this.handleChange} state={this.state} />\n                    <Bar\n                        data={this.state.data}\n                        width={50}\n                        height={16}\n                        options={{ maintainAspectRatio: true }}\n                      \n                    />\n                    <MeteorTable meteors={this.state.meteors}/>\n                </>\n        )\n    }\n\n    handleChange = (event) => {\n        this.setState((current) => {\n            return { years: { ...current.years, [event.target.name]: event.target.value } };\n        });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        this.setState((current) => {\n            return { changedYears: true, titleYears: { start: current.years.start, finish: current.years.finish}};\n        });\n    }\n}\n\nexport default MeteorList","import './App.css';\nimport MeteorList from './components/MeteorList'\n\nfunction App () {\n  return (\n    <div className=\"App\">\n    <MeteorList />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}